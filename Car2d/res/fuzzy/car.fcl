// Block definition (there may be more than one block per file)
FUNCTION_BLOCK car2d

// Define input variables
VAR_INPUT
    wsfront : REAL;
    wsfrontleft : REAL;
    wsfrontright : REAL;
    wsright : REAL;
    wsleft : REAL;
    waypointsensor : REAL;
    waypointsensorX : REAL;
    speed : REAL;
    speedSignal : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    changespeed : REAL;
    direction : REAL;
END_VAR

// Fuzzify input variable 'service'
FUZZIFY wsfront
	TERM touch := (0, 1) (0.2, 0);
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsfrontleft
	TERM touch := (0, 1) (0.2, 0);
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsfrontright
	TERM touch := (0, 1) (0.2, 0);
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsleft
	TERM touch := (0, 1) (0.2, 0);
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsright
	TERM touch := (0, 1) (0.2, 0);
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY waypointsensor
	TERM tooleft :=  (-90 ,0) (-80 ,1) (-70, 1) (-60, 0);
    TERM left := (-70, 0) (-60, 1) (-40, 1) (-10, 0) ;
    TERM equal := (-30, 0) (-20, 1) (20, 1) (30, 0); 
    TERM right := (10, 0) (40,1) (60,1) (70,0);
    TERM tooright := (60, 0) (70, 1) (80 ,1) (90,0);
END_FUZZIFY

FUZZIFY waypointsensorX
	TERM tooright :=  (-90 ,0) (-80 ,1) (-70, 1) (-60, 0);
    TERM right := (-70, 0) (-60, 1) (-30, 1) (-20, 0) ;
    TERM equal := (-25, 0) (-10, 1) (10, 1) (25, 0); 
    TERM left := (20, 0) (30,1) (60,1) (70,0);
    TERM tooleft := (60, 0) (70, 1) (80 ,1) (90,0);
END_FUZZIFY

FUZZIFY speed
    TERM halt := (0, 1) (5, 0);
    TERM slide := (0, 0) (5, 1) (20, 1) (25, 0) ;
    TERM slow := (20, 0) (25, 1) (40, 1) (45, 0); 
    TERM normal := (40, 0) (45,1) (60,1) (65,0);
    TERM fast := (60, 0) (65, 1) (80, 1) (85, 1);
    TERM topspeed := (80, 0) (85, 1) (100, 1);
END_FUZZIFY

FUZZIFY speedSignal
    TERM negative := (-1, 1) (0, 0);
    TERM positive := (0, 0) (1, 1);
END_FUZZIFY

DEFUZZIFY changespeed
    TERM break := (0,0) (2.5,1) (5,0);
    TERM speedup := (5,0) (7.5,1) (10,0);
    
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 7;
END_DEFUZZIFY


DEFUZZIFY direction
    TERM back := (-2,0) (-1,1) (0,0);
    TERM left := (0,0) (1,1) (2,0);
    TERM frontleft := (2,0) (3,1) (4,0);
    TERM front := (4,0) (5,1) (6,0);
    TERM frontright:= (6,0) (7,1) (8,0);
    TERM right := (8,0) (9,1) (10,0);
    
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY



RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF (wsfront IS critical AND speedSignal IS positive ) OR wsfront IS normal OR wsfront IS far OR wsfront IS infinite 
                THEN changespeed IS speedup;
	
	RULE 2 : IF (waypointsensorX IS left OR waypointsensorX IS tooleft) THEN direction IS frontright;
	RULE 3 : IF (waypointsensorX IS right OR waypointsensorX IS tooright) THEN direction IS frontleft;
	
	RULE 4 : IF (wsfront IS critical OR wsfront IS normal OR wsfront IS far)  
				AND (wsfrontright IS critical OR wsfrontright IS normal OR wsfrontright IS far)
				AND  wsleft IS infinite THEN direction IS left;
	RULE 5 : IF (wsfront IS critical OR wsfront IS normal OR wsfront IS far)  
				AND (wsfrontleft IS critical OR wsfrontleft IS normal OR wsfrontleft IS far) 
				AND  wsright IS infinite THEN direction IS right;
	
	RULE 6 : IF wsfront IS touch AND (speed IS halt) THEN direction IS back;
	RULE 7 : IF wsfront IS touch AND (speed IS halt) THEN changespeed IS break;
	
	RULE 7 : IF wsfront IS critical  AND (speed IS halt OR speed IS slide ) AND speedSignal IS negative THEN direction IS back;
	RULE 8 : IF wsfront IS critical AND (speed IS halt OR speed IS slide ) AND speedSignal IS negative  THEN changespeed IS break;




 END_RULEBLOCK

END_FUNCTION_BLOCK