// Block definition (there may be more than one block per file)
FUNCTION_BLOCK car2d

// Define input variables
VAR_INPUT
    wsfront : REAL;
    wsfrontleft : REAL;
    wsfrontright : REAL;
    wsright : REAL;
    wsleft : REAL;
    waypointsensor : REAL;
    speed : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    changespeed : REAL;
    direction : REAL;
END_VAR

// Fuzzify input variable 'service'
FUZZIFY wsfront
	TERM touch := (0, 1) (0.2, 0)
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsfrontleft
	TERM touch := (0, 1) (0.2, 0)
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsfrontright
	TERM touch := (0, 1) (0.2, 0)
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsleft
	TERM touch := (0, 1) (0.2, 0)
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY wsright
	TERM touch := (0, 1) (0.2, 0)
    TERM critical := (0.1, 0) (0.2, 1) (0.4, 1) (0.5, 0) ;
    TERM normal := (0.4, 0) (0.5, 1) (0.7, 1) (0.8, 0); 
    TERM far := (0.7, 0) (0.8,1) (1,1) (1.1,0);
    TERM infinite := (1, 0) (1.1, 1);
END_FUZZIFY

FUZZIFY waypointsensor
	TERM tooleft := (-10, 1) (-8, 0)
    TERM left := (-9, 0) (-7, 1) (-3, 1) (-1, 0) ;
    TERM equal := (-4, 0) (-2, 1) (2, 1) (8, 0); 
    TERM right := (1, 0) (3,1) (7,1) (9,0);
    TERM tooright := (8, 0) (10, 1);
END_FUZZIFY

FUZZIFY speed
	TERM halt := (0, 1) (5, 0)
    TERM slide := (0, 0) (5, 1) (20, 1) (25, 0) ;
    TERM slow := (20, 0) (25, 1) (40, 1) (45, 0); 
    TERM normal := (40, 0) (45,1) (60,1) (65,0);
    TERM fast := (60, 0) (65, 1) (80, 1) (85, 1);
    TERM topspeed := (80, 0) (85, 1) (100, 1);
END_FUZZIFY


DEFUZZIFY changespeed
    TERM break := (0,0) (2.5,1) (5,0);
    TERM speedup := (5,0) (7.5,1) (10,0);
    
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY


DEFUZZIFY direction
    TERM front := (0,0) (2.5,1) (5,0);
    TERM frontleft := (5,0) (7.5,1) (10,0);
    TERM frontright := (5,0) (7.5,1) (10,0);
    TERM left := (5,0) (7.5,1) (10,0);
    TERM right := (5,0) (7.5,1) (10,0);
    TERM back := (5,0) (7.5,1) (10,0);
    
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 7.5;
END_DEFUZZIFY



RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF service IS poor OR food IS rancid 
                THEN tip IS cheap;

    RULE 2 : IF service IS good 
                THEN tip IS average; 

    RULE 3 : IF service IS excellent AND food IS delicious 
                THEN tip is generous;
END_RULEBLOCK

END_FUNCTION_BLOCK